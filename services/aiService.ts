

import { GoogleGenAI, GenerateContentResponse, Part } from "@google/genai";
import { TripPreferences, ItineraryPlan, AIProviderConfig } from '../types';
import { tripAdvisorTool, handleTripAdvisorTool } from '../tools/tripAdvisorTool';

if (!process.env.API_KEY) {
  console.warn("API_KEY environment variable not set. Gemini provider will not work.");
}
const ai = process.env.API_KEY ? new GoogleGenAI({ apiKey: process.env.API_KEY }) : null;


const ITINERARY_PLAN_SCHEMA_DESCRIPTION = `
  You must produce a JSON object with the following structure. Do not add any text before or after the JSON object.

  interface ItineraryPlan {
    tripTitle: string; // A catchy title, e.g., '5-Day Historical and Culinary Adventure in Rome'
    tripOverview: string; // A short paragraph summarizing the trip.
    costEstimation: {
      accommodation: string; // e.g., "$500 - $800"
      activities: string;    // e.g., "$200 - $400"
      food: string;          // e.g., "$300 - $500"
      total: string;         // e.g., "$1000 - $1700"
    };
    flightInfo: {
      suggestions: {
        airline: string; // e.g., 'Delta Airlines'
        priceRange: string; // e.g., '$600 - $850'
        notes: string; // e.g., 'Direct flight, best value'
      }[];
      googleFlightsUrl: string; // A pre-filled Google Flights URL for the user's trip.
    };
    accommodation: {
      recommendations: string; // Advice on best neighborhoods to stay.
      examples: {
          name: string; // e.g., 'Hotel Example' or 'Apartment Complex Name'
          priceRange: string; // e.g., '$150 - $250 per night'
      }[]; // 1-2 specific examples of accommodation with estimated price ranges.
    };
    generalTips: {
      transit: string; // Tips on getting around the destination, including specific advice on traveling from the main airport to the city center.
      customs: string; // Notes on local customs or etiquette.
      weather: string; // Expected weather and packing advice.
      practicalAdvice: string; // Other tips like safety, currency, etc.
    };
    dailyItineraries: {
      day: number;
      date: string; // The specific date or relative day (e.g., 'Day 1').
      title: string; // A theme for the day, e.g., 'Ancient Rome Exploration'.
      activities: {
        time: string; // e.g., 'Morning', '2:00 PM'.
        description: string; // Name of the activity.
        details?: string; // More details about the activity.
      }[];
      food: {
        meal: string; // e.g., 'Lunch', 'Dinner'.
        suggestion: string; // A specific restaurant or type of food.
        notes?: string; // Details like reservation needed, dietary notes.
        link?: string; // A direct TripAdvisor search URL for the suggestion. Generated by the 'searchTripAdvisor' tool.
      }[];
      insiderTip: string; // A helpful 'local' tip for the day.
    }[];
  }
`;

const buildBasePrompt = (prefs: TripPreferences, isGrounded: boolean): string => `
  You are an expert travel planner. Your task is to create a detailed, personalized, and realistic travel itinerary.
  ${isGrounded ? 'Use your search capabilities to find real-time, up-to-date information, especially for flight suggestions, costs, and links.' : ''}
  
  The plan should be well-structured, considering the group size, ages, budget, and interests to ensure a smooth and enjoyable trip.

  **CRITICAL INSTRUCTIONS:**
  1.  **Research and include flight suggestions:** 
      - Find 2-3 flight options for a trip from ${prefs.origin} to ${prefs.destination}.
      - Provide estimated price ranges for a round trip.
      - Generate a pre-filled Google Flights URL for a round-trip flight from ${prefs.origin} to ${prefs.destination}, starting on the specified date for the trip's duration.
  2.  **Provide a cost estimation:**
      - Estimate costs for the entire trip based on the user's budget preference.
      - Break it down into 'accommodation', 'activities', and 'food', and provide a 'total' estimated range.
  3.  **Provide dining suggestions:**
      - For every dining suggestion, suggest a specific, highly-rated restaurant.
      - **For each restaurant, you MUST use the 'searchTripAdvisor' tool** to generate a search URL.
      - Place the URL returned by the tool into the 'link' property for that dining suggestion.
      - Provide only the name of the restaurant in the 'suggestion' property.
      - **Do NOT provide links for activities.** The UI will handle generating navigation links.
  4.  **Provide accommodation suggestions:** For each accommodation example, include a specific name and an estimated price range (e.g., per night).
  5.  **Provide airport transit advice:** In the 'generalTips.transit' section, include specific, practical advice on getting from the destination's main airport to the city center (e.g., train, bus, taxi options with estimated costs and travel times).
  
  User Preferences:
  - Origin: ${prefs.origin}
  - Destination: ${prefs.destination}
  - Trip Duration: ${prefs.duration} days
  - Travel Dates: Starting on ${prefs.startDate} for ${prefs.duration} days.
  - Group Composition: ${prefs.groupComposition}
  - Budget: ${prefs.budget}
  - Key Interests: ${prefs.interests.join(', ')}
  - Preferred Accommodation Style: ${prefs.accommodationStyle}
  - Transportation Preference: ${prefs.transportation}
  - Special Needs or Constraints: ${prefs.specialNeeds || 'None'}
  - Prior Experience with Destination: ${prefs.experience}
  - Desired Attraction Type: ${prefs.attractionType}
`;


const generateWithGemini = async (prefs: TripPreferences): Promise<ItineraryPlan> => {
    if (!ai) throw new Error("Google Gemini API key not configured.");
    
    // The googleSearch tool cannot be used at the same time as function calling tools.
    // We are prioritizing the custom tripAdvisorTool to ensure reliable links.
    const prompt = buildBasePrompt(prefs, false) + `
      Please generate a complete itinerary based on the details above. 
      You MUST respond ONLY with a single, valid JSON object that strictly follows the schema structure described below.
      Do not include any text, pleasantries, or markdown formatting (like \`\`\`json) before or after the JSON object.

      ${ITINERARY_PLAN_SCHEMA_DESCRIPTION}
    `;

    const model = "gemini-2.5-flash";
    const tools = [tripAdvisorTool]; // Use only the function calling tool
    const conversationHistory: Part[] = [{ text: prompt }];
    let response: GenerateContentResponse;

    try {
        response = await ai.models.generateContent({
            model,
            contents: { parts: conversationHistory },
            config: {
              tools,
            },
        });

        // Loop to handle tool calls if the model requests them
        while (response.candidates?.[0]?.content?.parts?.[0]?.functionCall) {
            const functionCall = response.candidates[0].content.parts[0].functionCall;

            // Add the AI's tool request to the conversation history
            conversationHistory.push({ functionCall });

            // Execute the tool and get the response
            const toolResponsePart = handleTripAdvisorTool(functionCall);

            // Add the tool's response to the conversation history
            conversationHistory.push(toolResponsePart);
            
            // Send the updated history back to the model
            response = await ai.models.generateContent({
                model,
                contents: { parts: conversationHistory },
                config: {
                    tools,
                },
            });
        }


        const responseText = response.text;
        if (!responseText) {
            const finishReason = response.candidates?.[0]?.finishReason;
            const safetyRatings = response.candidates?.[0]?.safetyRatings;
            let errorMessage = `The AI returned an empty response. Finish reason: ${finishReason || 'Unknown'}.`;
            if (finishReason === 'SAFETY') {
                errorMessage = `The AI response was blocked for safety reasons. Please modify your request.`;
            }
            console.error("Gemini response text was empty.", { response });
            throw new Error(errorMessage);
        }

        // Robust JSON extraction: Find the first '{' and the last '}' to extract the JSON object,
        // ignoring any conversational text before or after it.
        const firstBraceIndex = responseText.indexOf('{');
        const lastBraceIndex = responseText.lastIndexOf('}');

        if (firstBraceIndex === -1 || lastBraceIndex === -1 || lastBraceIndex < firstBraceIndex) {
            console.error("Could not find a valid JSON object in the AI response.", { responseText });
            throw new Error("The AI returned a plan in an unexpected format. Please try again.");
        }

        let jsonText = responseText.substring(firstBraceIndex, lastBraceIndex + 1);

        // Sanitize the JSON string to fix a known issue where the AI model incorrectly
        // escapes apostrophes (e.g., \'), which is invalid in JSON.
        jsonText = jsonText.replace(/\\'/g, "'");

        const plan: ItineraryPlan = JSON.parse(jsonText);
        
        const groundingChunks = response.candidates?.[0]?.groundingMetadata?.groundingChunks;
        if (groundingChunks && groundingChunks.length > 0) {
          plan.sources = groundingChunks
            .map((chunk: any) => chunk.web)
            .filter((source: any) => source && source.uri && source.title)
            .map((source: any) => ({
              uri: source.uri,
              title: source.title,
            }));
        }

        return plan;
    } catch (error) {
        console.error("Error generating itinerary from Gemini API:", error, "Raw response:", response?.text);
        if (error instanceof SyntaxError) {
          throw new Error("The AI returned a plan in an unexpected format. Please try again.");
        }
        // Re-throw custom errors or other JS errors to preserve the original, more descriptive message.
        if (error instanceof Error) {
            throw error;
        }
        // Fallback for cases where a non-Error object was thrown.
        throw new Error("Failed to parse or receive a valid plan from the Gemini AI.");
    }
};

const generateWithGroq = async (prefs: TripPreferences, config: AIProviderConfig): Promise<ItineraryPlan> => {
    if (!config.groqApiKey) throw new Error("Groq API key not provided.");
    
    const prompt = buildBasePrompt(prefs, false) + `
    
    IMPORTANT INSTRUCTION: For each day in the 'dailyItineraries' array, the 'food' array MUST contain at least two entries: one for 'Lunch' and one for 'Dinner'.
    
    ` + ITINERARY_PLAN_SCHEMA_DESCRIPTION;

    try {
        const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${config.groqApiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                messages: [{ role: "user", content: prompt }],
                model: "llama3-8b-8192",
                temperature: 0.7,
                response_format: { type: "json_object" },
            })
        });

        if (!response.ok) {
            const errorBody = await response.json();
            throw new Error(`Groq API error: ${errorBody.error.message}`);
        }

        const data = await response.json();
        const jsonText = data.choices[0]?.message?.content;
        return JSON.parse(jsonText);
    } catch (error) {
        console.error("Error generating itinerary from Groq API:", error);
        throw new Error(`Failed to get a valid plan from Groq. ${error instanceof Error ? error.message : ''}`);
    }
};

const generateWithOllama = async (prefs: TripPreferences, config: AIProviderConfig): Promise<ItineraryPlan> => {
    if (!config.ollamaUrl || !config.ollamaModel) throw new Error("Ollama URL or model not configured.");
    
    const prompt = buildBasePrompt(prefs, false) + `
    
    IMPORTANT INSTRUCTION: For each day in the 'dailyItineraries' array, the 'food' array MUST contain at least two entries: one for 'Lunch' and one for 'Dinner'.
    
    ` + ITINERARY_PLAN_SCHEMA_DESCRIPTION;

    try {
        const response = await fetch(`${config.ollamaUrl}/api/generate`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                model: config.ollamaModel,
                prompt: prompt,
                format: "json",
                stream: false,
            })
        });

        if (!response.ok) {
          throw new Error(`Ollama server returned an error: ${response.statusText}`);
        }

        const data = await response.json();
        return JSON.parse(data.response);
    } catch (error) {
        console.error("Error generating itinerary from Ollama:", error);
        throw new Error(`Failed to get a valid plan from Ollama. Ensure the server is running and the model is available. ${error instanceof Error ? error.message : ''}`);
    }
};

export const generateItinerary = async (prefs: TripPreferences, config: AIProviderConfig): Promise<ItineraryPlan> => {
    switch (config.provider) {
        case 'groq':
            return generateWithGroq(prefs, config);
        case 'ollama':
            return generateWithOllama(prefs, config);
        case 'gemini':
        default:
            return generateWithGemini(prefs);
    }
};

// --- Connection Test Functions ---

export const testGroqConnection = async (apiKey: string): Promise<boolean> => {
    if (!apiKey) return false;
    try {
        const response = await fetch("https://api.groq.com/openai/v1/models", {
            method: 'GET',
            headers: { 'Authorization': `Bearer ${apiKey}` }
        });
        return response.ok;
    } catch {
        return false;
    }
};

export const fetchOllamaModels = async (url: string): Promise<string[]> => {
    if (!url) return [];
    try {
        const response = await fetch(`${url}/api/tags`);
        if (!response.ok) return [];
        const data = await response.json();
        return data.models.map((model: any) => model.name);
    } catch {
        return [];
    }
};